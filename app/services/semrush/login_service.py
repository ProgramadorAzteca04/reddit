# app/services/semrush/login_service.py
from selenium.common.exceptions import TimeoutException, ElementClickInterceptedException
from app.services.reddit.browser_service import BrowserManagerProxy
from selenium.webdriver.support import expected_conditions as EC
from app.services.reddit.proxy_service import ProxyManager
from selenium.webdriver.remote.webdriver import WebDriver
from app.models.semrush_models import Campaign, CredentialSemrush
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from app.db.database import get_db
import traceback
import time
import os


# --- ¬°NUEVA FUNCI√ìN DE LOGOUT A√ëADIDA! ---
def _perform_logout(driver: "WebDriver", wait: "WebDriverWait"):
    """
    Realiza el proceso de cierre de sesi√≥n en Semrush.
    """
    print("\n   -> üëã Iniciando proceso de cierre de sesi√≥n...")
    try:
        # 1. Hacer clic en el bot√≥n del men√∫ de usuario
        print("      -> Buscando el bot√≥n del perfil de usuario...")
        user_menu_button = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, 'button[data-test="header-menu__user"]'))
        )
        
        # A veces un overlay puede interferir, usamos JavaScript como alternativa robusta
        try:
            user_menu_button.click()
        except ElementClickInterceptedException:
            print("      -> Clic interceptado. Intentando con JavaScript...")
            driver.execute_script("arguments[0].click();", user_menu_button)

        print("      -> ‚úÖ Clic en el perfil realizado. Esperando el men√∫...")
        time.sleep(2) # Pausa para que el men√∫ desplegable se muestre correctamente

        # 2. Hacer clic en el enlace de "Cerrar sesi√≥n"
        print("      -> Buscando el enlace de 'Cerrar sesi√≥n'...")
        logout_link = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, 'a[data-test="header-menu__user-logout"]'))
        )
        logout_link.click()
        print("      -> ‚úÖ Clic en 'Cerrar sesi√≥n' realizado.")
        
        # Esperamos a que la p√°gina de login vuelva a aparecer como confirmaci√≥n
        wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'input[name="email"]')))
        print("   -> üéâ ¬°Cierre de sesi√≥n completado exitosamente!")
        time.sleep(3)

    except TimeoutException:
        print("      -> üö® ERROR: No se pudo encontrar un elemento para el cierre de sesi√≥n.")
    except Exception as e:
        print(f"      -> üö® Ocurri√≥ un error inesperado durante el logout: {e}")
# -----------------------------------------------


def run_semrush_login_flow(credential_id: int):
    """
    Orquesta el flujo de inicio de sesi√≥n en Semrush para una credencial espec√≠fica.
    """
    print("\n" + "="*60)
    print(f"üöÄ INICIANDO FLUJO: Login en Semrush para la credencial ID #{credential_id}.")
    print("="*60)

    # --- 1. Obtener Credenciales de la Base de Datos ---
    db = next(get_db())
    try:
        credential = db.query(CredentialSemrush).filter(CredentialSemrush.id == credential_id).first()
        if not credential:
            print(f"   -> üö® ERROR: No se encontr√≥ la credencial de Semrush con ID: {credential_id}")
            return
        
        email = credential.email
        password = credential.password
        proxy_host = credential.proxy
        proxy_port = credential.port
        
        print(f"   -> ‚úÖ Credenciales encontradas para el correo: '{email}'")

    finally:
        db.close()

    # --- 2. Configuraci√≥n del Navegador ---
    CHROME_PATH = r"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
    URL = "https://es.semrush.com/login/"
    USER_DATA_DIR = os.path.join(os.getcwd(), "chrome_dev_session")

    browser_manager = None
    driver = None
    
    try:
        # --- L√≥gica de Proxy Mejorada ---
        proxy_config = None
        if proxy_host and proxy_port:
            print(f"   -> Buscando credenciales para el proxy {proxy_host}:{proxy_port} en 'proxies.txt'...")
            proxy_manager = ProxyManager()
            proxy_config = proxy_manager.get_proxy_by_host_port(proxy_host, proxy_port)
            
            if proxy_config:
                print("      -> ‚úÖ Credenciales del proxy encontradas.")
            else:
                raise ValueError(f"El proxy {proxy_host}:{proxy_port} de la BD no existe en proxies.txt")
        else:
            print("   -> ‚ö†Ô∏è No se utilizar√° proxy (no definido en la base de datos).")

        browser_manager = BrowserManagerProxy(
            chrome_path=CHROME_PATH, 
            user_data_dir=USER_DATA_DIR, 
            port="",
            proxy=proxy_config
        )
        
        driver = browser_manager.get_configured_driver(URL)
        if not driver:
            raise RuntimeError("No se pudo iniciar el driver de Selenium-Wire.")

        print("\n   -> Esperando 20 segundos para que la p√°gina de login cargue...")
        time.sleep(20)
        
        wait = WebDriverWait(driver, 30)

        # --- 3. Llenado del Formulario de Login ---
        print("   -> üìß Buscando el campo de email...")
        email_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'input[name="email"]')))
        email_field.click(); time.sleep(1)
        email_field.send_keys(email)
        print("      -> Email introducido.")

        print("   -> üîí Buscando el campo de contrase√±a...")
        password_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'input[name="password"]')))
        password_field.click(); time.sleep(1)
        password_field.send_keys(password)
        print("      -> Contrase√±a introducida.")
        
        print("   -> üö™ Buscando el bot√≥n de 'Iniciar sesi√≥n'...")
        login_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[.//span[text()="Iniciar sesi√≥n"]]')))
        login_button.click()
        print("      -> ‚úÖ Clic en 'Iniciar sesi√≥n' realizado.")

        # Esperamos a que la URL cambie como se√±al de un login exitoso
        wait.until(EC.url_contains("projects"))
        print("\n   -> üéâ ¬°Login exitoso! La sesi√≥n permanecer√° abierta por 30 segundos.")
        time.sleep(30) # Reducido para pruebas m√°s r√°pidas

        # --- ¬°LLAMADA A LA NUEVA FUNCI√ìN DE LOGOUT! ---
        _perform_logout(driver, wait)
        # ---------------------------------------------

    except TimeoutException:
        print("\n   -> üö® ERROR: El login fall√≥. Un elemento no fue encontrado a tiempo o la URL no cambi√≥.")
        print("      -> La ventana permanecer√° abierta 20 segundos para inspecci√≥n.")
        time.sleep(20)
    except Exception as e:
        print(f"\nüö® ERROR FATAL durante el flujo de login de Semrush: {e}")
        traceback.print_exc()
    finally:
        if browser_manager:
            browser_manager.quit_driver()
        print("\n" + "="*60)
        print("‚úÖ SERVICIO FINALIZADO: Flujo de login de Semrush.")
        print("="*60 + "\n")


def run_semrush_config_account_flow(id_campaign: int, city: str):
    """
    Busca una cuenta de Semrush sin campa√±a, realiza el login, configura el proyecto
    con la web de la campa√±a y, solo si tiene √©xito, actualiza la base de datos.
    """
    print("\n" + "="*60)
    print(f"üöÄ INICIANDO FLUJO: Configuraci√≥n de cuenta para Campa√±a ID #{id_campaign} en {city}.")
    print("="*60)

    # Paso 1: Buscar credencial y campa√±a sin modificar la BD
    db = next(get_db())
    try:
        print("   -> üîç Buscando una credencial disponible en la base de datos...")
        credential_to_use = db.query(CredentialSemrush).filter(CredentialSemrush.id_campaigns == None).first()
        if not credential_to_use:
            raise ValueError("No se encontr√≥ ninguna credencial con 'id_campaigns' vac√≠o.")
        print(f"   -> ‚úÖ Credencial encontrada (ID: {credential_to_use.id}), email: '{credential_to_use.email}'.")

        print(f"   -> üîç Buscando la campa√±a con ID: {id_campaign}...")
        campaign = db.query(Campaign).filter(Campaign.id == id_campaign).first()
        if not campaign:
            raise ValueError(f"No se encontr√≥ ninguna campa√±a con el ID: {id_campaign}")
        if not campaign.web:
            raise ValueError(f"La campa√±a con ID {id_campaign} no tiene una URL web definida.")
        print(f"   -> ‚úÖ Campa√±a encontrada. Web a configurar: '{campaign.web}'")
        
        web_url = campaign.web
        email = credential_to_use.email
        password = credential_to_use.password
        proxy_host = credential_to_use.proxy
        proxy_port = credential_to_use.port

    except Exception as e:
        print(f"   -> üö® ERROR en la preparaci√≥n: {e}")
        return
    finally:
        db.close()

    # Paso 2: Configuraci√≥n del navegador y login
    CHROME_PATH = r"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
    URL = "https://es.semrush.com/login/"
    USER_DATA_DIR = os.path.join(os.getcwd(), "chrome_dev_session")
    browser_manager = None
    
    try:
        proxy_config = None
        if proxy_host and proxy_port:
            proxy_manager = ProxyManager()
            proxy_config = proxy_manager.get_proxy_by_host_port(proxy_host, proxy_port)
            if not proxy_config:
                raise ValueError(f"El proxy {proxy_host}:{proxy_port} de la BD no existe en proxies.txt")
        
        browser_manager = BrowserManagerProxy(
            chrome_path=CHROME_PATH, user_data_dir=USER_DATA_DIR, port="", proxy=proxy_config
        )
        driver = browser_manager.get_configured_driver(URL)
        if not driver:
            raise RuntimeError("No se pudo iniciar el driver de Selenium-Wire.")

        print("\n   -> Esperando para que la p√°gina de login cargue...")
        time.sleep(20)
        wait = WebDriverWait(driver, 30)

        # Llenado del formulario de login
        email_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'input[name="email"]')))
        email_field.click(); time.sleep(1); email_field.send_keys(email)

        password_field = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'input[name="password"]')))
        password_field.click(); time.sleep(1); password_field.send_keys(password)
        
        login_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[.//span[text()="Iniciar sesi√≥n"]]')))
        login_button.click()
        print("      -> ‚úÖ Clic en 'Iniciar sesi√≥n' realizado.")

        # Paso 3: Configurar el proyecto con la web
        print("\n   -> üåê Esperando a la p√°gina de creaci√≥n de proyecto...")
        web_input_selector = 'input[data-ui-name="Input.Value"][placeholder="Indica el nombre de tu sitio web"]'
        web_input = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, web_input_selector)))
        
        print(f"   -> ‚úçÔ∏è  Introduciendo la web '{web_url}' en el campo del proyecto...")
        web_input.send_keys(web_url)
        time.sleep(2)
        
        # --- ¬°NUEVO BLOQUE DE C√ìDIGO A√ëADIDO! ---
        print("\n   -> üõ†Ô∏è  Buscando el bot√≥n 'Configurar' de seguimiento de posici√≥n...")
        # Este XPath busca el div con el data-path espec√≠fico y luego el bot√≥n que contiene el texto 'Configurar'
        config_button_xpath = '//div[@data-path="position_tracking"]//button[.//div[text()="Configurar"]]'
        
        config_button = wait.until(EC.element_to_be_clickable((By.XPATH, config_button_xpath)))
        
        config_button.click()
        print("   -> ‚úÖ Clic en el bot√≥n 'Configurar' realizado.")
        # -----------------------------------------------

        # Paso 4: SOLO SI TODO LO ANTERIOR ES CORRECTO, actualizar la BD
        print("\n   -> üíæ Proceso de automatizaci√≥n exitoso. Actualizando la base de datos...")
        db = next(get_db())
        try:
            credential_to_update = db.query(CredentialSemrush).filter(CredentialSemrush.id == credential_to_use.id).first()
            if credential_to_update:
                credential_to_update.id_campaigns = id_campaign
                db.commit()
                print("   -> ‚úÖ ¬°Base de datos actualizada! La campa√±a ha sido asignada a la credencial.")
            else:
                print("   -> üö® ERROR: No se encontr√≥ la credencial para actualizar al final del proceso.")
        except Exception as db_error:
            print(f"   -> üö® ERROR al actualizar la base de datos al final: {db_error}")
            db.rollback()
        finally:
            db.close()

        print("\n   -> üéâ ¬°Configuraci√≥n completada! La sesi√≥n permanecer√° abierta por 20 segundos.")
        time.sleep(20)
        _perform_logout(driver, wait)

    except Exception as e:
        print(f"\nüö® ERROR FATAL durante el flujo de configuraci√≥n: {e}")
        traceback.print_exc()
        print("   -> ‚ùå Como el proceso fall√≥, NO se ha realizado ninguna modificaci√≥n en la base de datos.")
    finally:
        if browser_manager:
            browser_manager.quit_driver()
        print("\n" + "="*60)
        print("‚úÖ SERVICIO FINALIZADO: Flujo de configuraci√≥n de cuenta Semrush.")
        print("="*60 + "\n")